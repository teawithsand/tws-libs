export enum PaintScreenEventType {
	POINTER_DOWN = "pointer-down",
	POINTER_UP = "pointer-up",
	POINTER_MOVE = "pointer-move",

	ELEMENT_CLICK = "element-click",
	ELEMENT_POINTER_OVER = "element-pointer-over",
	// ELEMENT_IN_BOUNDING_BOX = "element-in-bounding-box",
}

/**
 * Any event, which is generated by SceneRenderer or it's parent - container having the whole screen.
 */
export type PaintScreenEvent =
	| {
			type:
				| PaintScreenEventType.POINTER_DOWN
				| PaintScreenEventType.POINTER_MOVE
				| PaintScreenEventType.POINTER_UP
			event: PointerEvent
	  }
	| {
			type: PaintScreenEventType.ELEMENT_CLICK
			event: PointerEvent
			layerIndex: number
			elementIndex: number
	  }
	| {
			type: PaintScreenEventType.ELEMENT_POINTER_OVER
			event: PointerEvent
			layerIndex: number
			elementIndex: number
	  }
/*

	| {
			type: PaintScreenEventType.ELEMENT_IN_BOUNDING_BOX
			event: PointerEvent
			layerIndex: number
			elementIndex: number
			// contains screen coordinates, not canvas coordinates
			boundingBox: Rect
	  }

	  */
export enum PaintEventType {
	SCREEN = "screen",
}

/**
 * Any event generated by user.
 *
 * For internal events use redux state manager, as it's more suitable for this purpose.
 * Also for now there is no such thing as internal event. There is only state.
 */
export type PaintEvent = {
	type: PaintEventType.SCREEN
	screenEvent: PaintScreenEvent
}
